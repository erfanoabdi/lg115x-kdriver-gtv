/*
	SIC LABORATORY, LG ELECTRONICS INC., SEOUL, KOREA
	Copyright(c) 2010 by LG Electronics Inc.

	This program is free software; you can redistribute it and/or 
	modify it under the terms of the GNU General Public License
	version 2 as published by the Free Software Foundation.

	This program is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of 
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the 
	GNU General Public License for more details.
*/ 


/** @file
 *
 *  ADEC register details. ( used only within kdriver )
 *
 *  author     Sudhaher (kanthiraj.s@lge.com), Jongsang Oh(jongsang.oh@lge.com)
 *  version    0.56
 *  date       2010.04.22
 *  modified   2010.10.01
 *  add play mode for clip buffer statsus : v0.47
 *  add and update sound effect reg map : v0.48
 *  add stop_flag, sample rate, channel, bitrate reg map : v0.51
 *  add osd volume, volume control reg map : v0.51
 *  change sample rate, channel, bitrate reg map : v0.56
 *
 *  Re-arrange registor address : v0.59
 *  Add Registor for DSP separate : v0.60
 *  Change Volume control : v0.62
 *  Change INT1, Stop_Flag, Add OPB : v0.64
 *  Add check bit for SE : v0.68
 *  Add Decode Config 2 & 3 for wma : v0.69
 *  Add check bit for BT : v0.70
 *  Add check bit in 0x504 & 0x508 : v0.72
 *  SE parameters update : v0.73
 *  Add Decoding Event inimask : v0.74
 *  Delete field in aud_int0_clr, aud_int0_en, aud_int1_clr, aud_int1_en : v0.75
 *  Delete filed in aud_set_se : v0.75
 *  Change from aud_ver0, aud_ver1 to aud_dsp0_state, aud_dsp1_state : v0.75
 *  Add aud_set_dly0, aud_set_dly1 reg. for delay implemention : v0.76
 *  Add index for Lipsync : v0.79
 *  Change DSP1 memory address and size : v0.80
 *  Add MPB0 control for PCM mix : v0.85
 *  AUD_PLAY_MODE 에 nonzero 방지용 check bit 추가 : v0.86
 *  Modify Handshake & Add Woofer_VOL : v0.89
 *  Modify Volume Regs. : v0.90
 *     기존 0.5dB step (256) -> 0.25dB step (512)로 변경
 *     AUD_SET_VOL (0x504):Main, SPDIF 조절 -> AUD_SET_VOL (0x504):Main조절
 *     AUD_SET_DAC_VOL (0x508): DAC, SCART, HP 조절 -> AUD_SET_DS_VOL (0x508): DAC, SPDIF조절
 *     AUD_SET_W_VOL (0x578): Woofer 조절 (미변경)
 *     AUD_HDSHAKEL (0x57C): Handshake reg. -> AUD_SET_SH_VOL (0x57C): SCART, HP 조절
 *
 *  Add SCART out ctrl for aad bypass, DSP1 run_location : v0.93
 *  Add check bit for DSP1 reg. check : v0.97
 *  Delete check bit for aud_frm_cnt0 : v1.01
 *  MS10 parameter for aud_ms10_param : v1.04
 *  2단 hp volume control 추가        : v1.07
 *  add dsp function call stack       : v1.08
 *  add aac prfile and format         : v1.10(2011.04.30)
 *  add repeat_number                 : v1.11(2011.05.04)
*/

#ifndef _ADEC_REG_L8_H_
#define _ADEC_REG_L8_H_

/*----------------------------------------------------------------------------------------
    Control Constants
----------------------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------------------
    File Inclusions
----------------------------------------------------------------------------------------*/


#ifdef __cplusplus
extern "C" {
#endif

/*-----------------------------------------------------------------------------
	0x0000 aud_reserved00 ''
------------------------------------------------------------------------------*/
/*	no field */

/*-----------------------------------------------------------------------------
	0x0004 aud_pesmsaddr0 ''
------------------------------------------------------------------------------*/
/*	no field */

/*-----------------------------------------------------------------------------
	0x000c aud_pesmsize0 ''
------------------------------------------------------------------------------*/
/*	no field */

/*-----------------------------------------------------------------------------
	0x0014 aud_esmsaddr0 ''
------------------------------------------------------------------------------*/
/*	no field */

/*-----------------------------------------------------------------------------
	0x001c aud_esmsize0 ''
------------------------------------------------------------------------------*/
/*	no field */

/*-----------------------------------------------------------------------------
	0x0024 aud_pesasaddr0 ''
------------------------------------------------------------------------------*/
/*	no field */

/*-----------------------------------------------------------------------------
	0x002c aud_pesasize0 ''
------------------------------------------------------------------------------*/
/*	no field */

/*-----------------------------------------------------------------------------
	0x0034 aud_esasaddr0 ''
------------------------------------------------------------------------------*/
/*	no field */

/*-----------------------------------------------------------------------------
	0x003c aud_esasize0 ''
------------------------------------------------------------------------------*/
/*	no field */

/*-----------------------------------------------------------------------------
	0x0044 aud_esidxtbl ''
------------------------------------------------------------------------------*/
/*	no field */

/*-----------------------------------------------------------------------------
	0x004c aud_esidxsize ''
------------------------------------------------------------------------------*/
/*	no field */

/*-----------------------------------------------------------------------------
	0x01fc aud_hpi_a_flag ''
------------------------------------------------------------------------------*/
/*	no field */

/*-----------------------------------------------------------------------------
	0x0204 aud_se_paramaddr ''
------------------------------------------------------------------------------*/
/*	no field */

/*-----------------------------------------------------------------------------
	0x020c aud_se_param_size ''
------------------------------------------------------------------------------*/
/*	no field */

/*-----------------------------------------------------------------------------
	0x0214 aud_dpbm_saddr ''
------------------------------------------------------------------------------*/
/*	no field */

/*-----------------------------------------------------------------------------
	0x021c aud_dpbm_size ''
------------------------------------------------------------------------------*/
/*	no field */

/*-----------------------------------------------------------------------------
	0x0224 aud_dpba_saddr ''
------------------------------------------------------------------------------*/
/*	no field */

/*-----------------------------------------------------------------------------
	0x022c aud_dpba_size ''
------------------------------------------------------------------------------*/
/*	no field */

/*-----------------------------------------------------------------------------
	0x0234 aud_mpb0_saddr ''
------------------------------------------------------------------------------*/
/*	no field */

/*-----------------------------------------------------------------------------
	0x023c aud_mpb0_size ''
------------------------------------------------------------------------------*/
/*	no field */

/*-----------------------------------------------------------------------------
	0x0244 aud_mpb1_saddr ''
------------------------------------------------------------------------------*/
/*	no field */

/*-----------------------------------------------------------------------------
	0x024c aud_mpb1_size ''
------------------------------------------------------------------------------*/
/*	no field */

/*-----------------------------------------------------------------------------
	0x0254 aud_mpb2_saddr ''
------------------------------------------------------------------------------*/
/*	no field */

/*-----------------------------------------------------------------------------
	0x025c aud_mpb2_size ''
------------------------------------------------------------------------------*/
/*	no field */

/*-----------------------------------------------------------------------------
	0x0264 aud_mpb3_saddr ''
------------------------------------------------------------------------------*/
/*	no field */

/*-----------------------------------------------------------------------------
	0x026c aud_mpb3_size ''
------------------------------------------------------------------------------*/
/*	no field */

/*-----------------------------------------------------------------------------
	0x0274 aud_dsp1inter_saddr ''
------------------------------------------------------------------------------*/
/*	no field */

/*-----------------------------------------------------------------------------
	0x027c aud_dsp1inter_size ''
------------------------------------------------------------------------------*/
/*	no field */

/*-----------------------------------------------------------------------------
	0x02a4 aud_dsp1pc0 ''
------------------------------------------------------------------------------*/
/*	no field */

/*-----------------------------------------------------------------------------
	0x02ac aud_dsp1pc1 ''
------------------------------------------------------------------------------*/
/*	no field */

/*-----------------------------------------------------------------------------
	0x02b4 aud_dsp1pc2 ''
------------------------------------------------------------------------------*/
/*	no field */

/*-----------------------------------------------------------------------------
	0x02bc aud_dsp1pc3 ''
------------------------------------------------------------------------------*/
/*	no field */

/*-----------------------------------------------------------------------------
	0x0400 aud_int0_id ''
------------------------------------------------------------------------------*/
/*	no field */

/*-----------------------------------------------------------------------------
	0x0404 aud_int0_clr ''
------------------------------------------------------------------------------*/
/*	no field */

/*-----------------------------------------------------------------------------
	0x0408 aud_int0_en ''
------------------------------------------------------------------------------*/
/*	no field */

/*-----------------------------------------------------------------------------
	0x040c aud_int1_id ''
------------------------------------------------------------------------------*/
/*	no field */

/*-----------------------------------------------------------------------------
	0x0410 aud_int1_clr ''
------------------------------------------------------------------------------*/
/*	no field */

/*-----------------------------------------------------------------------------
	0x0414 aud_int1_en ''
------------------------------------------------------------------------------*/
/*	no field */

/*-----------------------------------------------------------------------------
	0x0418 aud_runstall0 ''
------------------------------------------------------------------------------*/
typedef struct {
	UINT32
	aud_runstall0                   : 1;	//     0
} AUD_RUNSTALL0;

/*-----------------------------------------------------------------------------
	0x041c aud_runstall1 ''
------------------------------------------------------------------------------*/
typedef struct {
	UINT32
	aud_runstall1                   : 1;	//     0
} AUD_RUNSTALL1;

/*-----------------------------------------------------------------------------
	0x0420 aud_statvecsel0 ''
------------------------------------------------------------------------------*/
typedef struct {
	UINT32
	aud_statvecsel0                 : 1;	//     0
} AUD_STATVECSEL0;

/*-----------------------------------------------------------------------------
	0x0424 aud_statvecsel1 ''
------------------------------------------------------------------------------*/
typedef struct {
	UINT32
	aud_statvecsel1                 : 1;	//     0
} AUD_STATVECSEL1;

/*-----------------------------------------------------------------------------
	0x0428 aud_pwaitmode0 ''
------------------------------------------------------------------------------*/
typedef struct {
	UINT32
	aud_pwaitmode0                  : 1;	//     0
} AUD_PWAITMODE0;

/*-----------------------------------------------------------------------------
	0x042c aud_pwaitmode1 ''
------------------------------------------------------------------------------*/
typedef struct {
	UINT32
	aud_pwaitmode1                  : 1;	//     0
} AUD_PWAITMODE1;

/*-----------------------------------------------------------------------------
	0x0430 aud_dsp0prid ''
------------------------------------------------------------------------------*/
/*	no field */

/*-----------------------------------------------------------------------------
	0x0434 aud_dsp1prid ''
------------------------------------------------------------------------------*/
/*	no field */

/*-----------------------------------------------------------------------------
	0x0438 aud_swreset ''
------------------------------------------------------------------------------*/
typedef struct {
	UINT32
	aresetout                       : 1,	//     0
	apbresetout                     : 1,	//     1
	aversetout                      : 1,	//     2
	veresetout                      : 1,	//     3
	fs20resetout                    : 1,	//     4
	fs21resetout                    : 1,	//     5
	aud_swreset                     : 1,	//     6
	fs23resetout                    : 1,	//     7
	fs24resetout                    : 1,	//     8
	asrcrstout                      : 1,	//     9
	dsp0ocdresetout                 : 1,	//    10
	dsp1ocdresetout                 : 1,	//    11
	dsp0bresetout                   : 1,	//    12
	dsp1bresetout                   : 1,	//    13
	aadresetout                     : 1,	//    14
	aadapbresetout                  : 1,	//    15
	mipdacresetout                  : 1,	//    16
	mipadcresetout                  : 1,	//    17
	mipmicresetout                  : 1,	//    18
	miphpdrvresetout                : 1,	//    19
	miphbdrvcntresetout             : 1;	//    20
} AUD_SWRESET;

/*-----------------------------------------------------------------------------
	0x043c aud_mon_sel ''
------------------------------------------------------------------------------*/
/*	no field */

/*-----------------------------------------------------------------------------
	0x0440 aud_reserved ''
------------------------------------------------------------------------------*/
/*	no field */

/*-----------------------------------------------------------------------------
	0x0444 aud_dirq0 ''
------------------------------------------------------------------------------*/
typedef struct {
	UINT32
	aud_dirq0                       : 1;	//     0
} AUD_DIRQ0;

/*-----------------------------------------------------------------------------
	0x0448 aud_dirq1 ''
------------------------------------------------------------------------------*/
typedef struct {
	UINT32
	aud_dirq1                       : 1;	//     0
} AUD_DIRQ1;

/*-----------------------------------------------------------------------------
	0x044c aud_debugen0 ''
------------------------------------------------------------------------------*/
typedef struct {
	UINT32
	aud_debugen0                    : 1;	//     0
} AUD_DEBUGEN0;

/*-----------------------------------------------------------------------------
	0x0450 aud_debugen1 ''
------------------------------------------------------------------------------*/
typedef struct {
	UINT32
	aud_debugen1                    : 1;	//     0
} AUD_DEBUGEN1;

/*-----------------------------------------------------------------------------
	0x0454 aud_nmiint0 ''
------------------------------------------------------------------------------*/
typedef struct {
	UINT32
	aud_nmiint0                     : 1;	//     0
} AUD_NMIINT0;

/*-----------------------------------------------------------------------------
	0x0458 aud_mmiint1 ''
------------------------------------------------------------------------------*/
typedef struct {
	UINT32
	aud_mmiint1                     : 1;	//     0
} AUD_MMIINT1;

/*-----------------------------------------------------------------------------
	0x045c aud_xocdmode0 ''
------------------------------------------------------------------------------*/
typedef struct {
	UINT32
	aud_xocdmode0                   : 1;	//     0
} AUD_XOCDMODE0;

/*-----------------------------------------------------------------------------
	0x0460 aud_xocdmode1 ''
------------------------------------------------------------------------------*/
typedef struct {
	UINT32
	aud_xocdmode1                   : 1;	//     0
} AUD_XOCDMODE1;

/*-----------------------------------------------------------------------------
	0x0464 aud_debugdata0 ''
------------------------------------------------------------------------------*/
/*	no field */

/*-----------------------------------------------------------------------------
	0x0468 aud_debugdata1 ''
------------------------------------------------------------------------------*/
/*	no field */

/*-----------------------------------------------------------------------------
	0x046c aud_debugpc0 ''
------------------------------------------------------------------------------*/
/*	no field */

/*-----------------------------------------------------------------------------
	0x0470 aud_debugpc1 ''
------------------------------------------------------------------------------*/
/*	no field */

/*-----------------------------------------------------------------------------
	0x0474 aud_debugstat0 ''
------------------------------------------------------------------------------*/
/*	no field */

/*-----------------------------------------------------------------------------
	0x0478 aud_debugstat1 ''
------------------------------------------------------------------------------*/
/*	no field */

/*-----------------------------------------------------------------------------
	0x047c aud_gstcchreg ''
------------------------------------------------------------------------------*/
typedef struct {
	UINT32
	aud_gstcchreg                   : 1;	//     0
} AUD_GSTCCHREG;

/*-----------------------------------------------------------------------------
	0x0480 aud_gstcclreg ''
------------------------------------------------------------------------------*/
/*	no field */

/*-----------------------------------------------------------------------------
	0x0500 aud_play_mode ''
------------------------------------------------------------------------------*/
typedef struct {
	UINT32
	play_mode                       : 4,	//  0: 3
	                                : 4,	//  4: 7 reserved
	ad_play_mode                    : 4,	//  8:11
	trick_play_mode                 : 4,	// 12:15
	buffer_state                    : 4,	// 16:19
	repeat_number                   : 8,	// 20:27
	check_bit                       : 4;	// 28:31
} AUD_PLAY_MODE;

/*-----------------------------------------------------------------------------
	0x0504 aud_set_volume ''
------------------------------------------------------------------------------*/
typedef struct {
	UINT32
	damp_mute_ctrl                  : 1,	//     0
	ad_mute_ctrl                    : 1,	//     1
	                                : 1,	//     2 reserved
	check_bit                       : 1,	//     3
	damp_vol_ctrl_en                : 1,	//     4
	ad_vol_ctrl_en                  : 1,	//     5
	                                : 2,	//  6: 7 reserved
	damp_volume                     :12,	//  8:19
	ad_volume                       :12;	// 20:31
} AUD_SET_VOLUME;

/*-----------------------------------------------------------------------------
	0x0508 aud_set_ds_vol ''
------------------------------------------------------------------------------*/
typedef struct {
	UINT32
	dac_mute_ctrl                   : 1,	//     0
	spdif_mute_ctrl                 : 1,	//     1
	                                : 1,	//     2 reserved
	check_bit                       : 1,	//     3
	dac_vol_ctrl_en                 : 1,	//     4
	spdif_vol_ctrl_en               : 1,	//     5
	                                : 2,	//  6: 7 reserved
	dac_volume                      :12,	//  8:19
	spdif_volume                    :12;	// 20:31
} AUD_SET_DS_VOL;

/*-----------------------------------------------------------------------------
	0x050c aud_set_inout ''
------------------------------------------------------------------------------*/
typedef struct {
	UINT32
	out_res                         : 4,	//  0: 3
	out_format                      : 4,	//  4: 7
	spdif_type                      : 4,	//  8:11
	out_mode                        : 4,	// 12:15
	in_port                         : 4,	// 16:19
	in_res                          : 4,	// 20:23
	in_format                       : 4,	// 24:27
	scart_out_ctrl                  : 3,	// 28:30
	check_bit                       : 1;	//    31
} AUD_SET_INOUT;

/*-----------------------------------------------------------------------------
	0x0510 aud_pesm_wptr0 ''
------------------------------------------------------------------------------*/
/*	no field */

/*-----------------------------------------------------------------------------
	0x0514 aud_pesm_rptr0 ''
------------------------------------------------------------------------------*/
/*	no field */

/*-----------------------------------------------------------------------------
	0x0518 aud_pesa_wptr0 ''
------------------------------------------------------------------------------*/
/*	no field */

/*-----------------------------------------------------------------------------
	0x051c aud_pesa_rptr0 ''
------------------------------------------------------------------------------*/
/*	no field */

/*-----------------------------------------------------------------------------
	0x0520 aud_dpbm_wptr ''
------------------------------------------------------------------------------*/
/*	no field */

/*-----------------------------------------------------------------------------
	0x0524 aud_dpbm_rptr ''
------------------------------------------------------------------------------*/
/*	no field */

/*-----------------------------------------------------------------------------
	0x0528 aud_dpba_wptr ''
------------------------------------------------------------------------------*/
/*	no field */

/*-----------------------------------------------------------------------------
	0x052c aud_dpba_rptr ''
------------------------------------------------------------------------------*/
/*	no field */

/*-----------------------------------------------------------------------------
	0x0530 aud_ppb_wptr ''
------------------------------------------------------------------------------*/
/*	no field */

/*-----------------------------------------------------------------------------
	0x0534 aud_ppb_rptr ''
------------------------------------------------------------------------------*/
/*	no field */

/*-----------------------------------------------------------------------------
	0x0538 aud_lip_cfg ''
------------------------------------------------------------------------------*/
typedef struct {
	UINT32
	main_lip_en0                    : 4,	//  0: 3
	asoc_lip_en0                    : 4,	//  4: 7
	main_lip_en1                    : 4,	//  8:11
	asoc_lip_en1                    : 4,	// 12:15
	                                :12,	// 16:27 reserved
	check_bit                       : 4;	// 28:31
} AUD_LIP_CFG;

/*-----------------------------------------------------------------------------
	0x053c aud_mlip_bound0 ''
------------------------------------------------------------------------------*/
typedef struct {
	UINT32
	main_ubound0                    : 8,	//  0: 7
	main_lbound0                    : 8,	//  8:15
	main_offset0                    :12,	// 16:27
	check_bit                       : 4;	// 28:31
} AUD_MLIP_BOUND0;

/*-----------------------------------------------------------------------------
	0x0540 aud_alip_bound0 ''
------------------------------------------------------------------------------*/
typedef struct {
	UINT32
	asoc_ubound0                    : 8,	//  0: 7
	asoc_lbound0                    : 8,	//  8:15
	asoc_offset0                    :12,	// 16:27
	check_bit                       : 4;	// 28:31
} AUD_ALIP_BOUND0;

/*-----------------------------------------------------------------------------
	0x0544 aud_frm_cnt0 ''
------------------------------------------------------------------------------*/
typedef struct {
	UINT32
	main_frm                        :16,	//  0:15
	asoc_frm                        :16;	// 16:31
} AUD_FRM_CNT0;

/*-----------------------------------------------------------------------------
	0x0548 cmd12 ''
------------------------------------------------------------------------------*/
/*	no field */

/*-----------------------------------------------------------------------------
	0x054c aud_decstat0 ''
------------------------------------------------------------------------------*/
typedef struct {
	UINT32
	es_info0                        :12,	//  0:11
	es_info1                        : 8,	// 12:19
	es_info2                        : 4,	// 20:23
	es_info3                        : 4,	// 24:27
	es_existence                    : 4;	// 28:31
} AUD_DECSTAT0;

/*-----------------------------------------------------------------------------
	0x0550 aud_decstat1 ''
------------------------------------------------------------------------------*/
/*	no field */

/*-----------------------------------------------------------------------------
	0x0554 aud_decstat2 ''
------------------------------------------------------------------------------*/
/*	no field */

/*-----------------------------------------------------------------------------
	0x0558 aud_decstat3 ''
------------------------------------------------------------------------------*/
/*	no field */

/*-----------------------------------------------------------------------------
	0x055c aud_deccfg0 ''
------------------------------------------------------------------------------*/
typedef struct {
	UINT32
	bitrate                         :16,	//  0:15
	aac_pf_format                   : 4,	// 16:19
	aac_bs_format                   : 4,	// 20:23
	                                : 4,	// 24:27 reserved
	check_bit                       : 4;	// 28:31
} AUD_DECCFG0;

/*-----------------------------------------------------------------------------
	0x0560 aud_deccfg1 ''
------------------------------------------------------------------------------*/
typedef struct {
	UINT32
	ch_num                          : 8,	//  0: 7
	bit_num                         : 8,	//  8:15
	sfreq                           :12,	// 16:27
	check_bit                       : 4;	// 28:31
} AUD_DECCFG1;

/*-----------------------------------------------------------------------------
	0x0564 aud_deccfg2 ''
------------------------------------------------------------------------------*/
typedef struct {
	UINT32
	avg_bytes_per_sec               ;   	// 31: 0
} AUD_DECCFG2;

/*-----------------------------------------------------------------------------
	0x0568 aud_deccfg3 ''
------------------------------------------------------------------------------*/
typedef struct {
	UINT32
	block_align                     :16,	//  0:15
	encode_opt                      :16;	// 16:31
} AUD_DECCFG3;

/*-----------------------------------------------------------------------------
	0x056c aud_stc24 ''
------------------------------------------------------------------------------*/
/*	no field */

/*-----------------------------------------------------------------------------
	0x0570 aud_ptsm24 ''
------------------------------------------------------------------------------*/
/*	no field */

/*-----------------------------------------------------------------------------
	0x0574 aud_ptsa24 ''
------------------------------------------------------------------------------*/
/*	no field */

/*-----------------------------------------------------------------------------
	0x0578 aud_set_w_vol ''
------------------------------------------------------------------------------*/
typedef struct {
	UINT32
	w_mute_ctrl                     : 1,	//     0
	                                : 2,	//  1: 2 reserved
	check_bit                       : 1,	//     3
	w_vol_ctrl_en                   : 1,	//     4
	hp_w_vol_ctrl_en                : 1,	//     5
	                                : 2,	//  6: 7 reserved
	w_volume                        :12,	//  8:19
	hp_w_volume                     :12;	// 20:31
} AUD_SET_W_VOL;

/*-----------------------------------------------------------------------------
	0x057c aud_set_sh_vol ''
------------------------------------------------------------------------------*/
typedef struct {
	UINT32
	scart_mute_ctrl                 : 1,	//     0
	hp_mute_ctrl                    : 1,	//     1
	                                : 1,	//     2 reserved
	check_bit                       : 1,	//     3
	scart_vol_ctrl_en               : 1,	//     4
	hp_vol_ctrl_en                  : 1,	//     5
	                                : 2,	//  6: 7 reserved
	scart_volume                    :12,	//  8:19
	hp_volume                       :12;	// 20:31
} AUD_SET_SH_VOL;

/*-----------------------------------------------------------------------------
	0x0580 aud_dsp0offset0 ''
------------------------------------------------------------------------------*/
/*	no field */

/*-----------------------------------------------------------------------------
	0x0584 aud_dsp0offset1 ''
------------------------------------------------------------------------------*/
/*	no field */

/*-----------------------------------------------------------------------------
	0x0588 aud_dsp0offset2 ''
------------------------------------------------------------------------------*/
/*	no field */

/*-----------------------------------------------------------------------------
	0x058c aud_dsp0offset3 ''
------------------------------------------------------------------------------*/
/*	no field */

/*-----------------------------------------------------------------------------
	0x0590 aud_dsp0offset4 ''
------------------------------------------------------------------------------*/
/*	no field */

/*-----------------------------------------------------------------------------
	0x0594 aud_dsp0offset5 ''
------------------------------------------------------------------------------*/
/*	no field */

/*-----------------------------------------------------------------------------
	0x0598 aud_dsp0offset6 ''
------------------------------------------------------------------------------*/
/*	no field */

/*-----------------------------------------------------------------------------
	0x059c aud_dsp0offset7 ''
------------------------------------------------------------------------------*/
/*	no field */

/*-----------------------------------------------------------------------------
	0x05a0 aud_dsp1offset0 ''
------------------------------------------------------------------------------*/
/*	no field */

/*-----------------------------------------------------------------------------
	0x05a4 aud_dsp1offset1 ''
------------------------------------------------------------------------------*/
/*	no field */

/*-----------------------------------------------------------------------------
	0x05a8 aud_dsp1offset2 ''
------------------------------------------------------------------------------*/
/*	no field */

/*-----------------------------------------------------------------------------
	0x05ac aud_dsp1offset3 ''
------------------------------------------------------------------------------*/
/*	no field */

/*-----------------------------------------------------------------------------
	0x05b0 aud_dsp1offset4 ''
------------------------------------------------------------------------------*/
/*	no field */

/*-----------------------------------------------------------------------------
	0x05b4 aud_dsp1offset5 ''
------------------------------------------------------------------------------*/
/*	no field */

/*-----------------------------------------------------------------------------
	0x05b8 aud_dsp1offset6 ''
------------------------------------------------------------------------------*/
/*	no field */

/*-----------------------------------------------------------------------------
	0x05bc aud_dsp1offset7 ''
------------------------------------------------------------------------------*/
/*	no field */

/*-----------------------------------------------------------------------------
	0x05c0 aud_set_se ''
------------------------------------------------------------------------------*/
typedef struct {
	UINT32
	se_mode                         :18,	//  0:17
	                                : 2,	// 18:19 reserved
	check_bit                       : 4,	// 20:23
	osd_volume                      : 8;	// 24:31
} AUD_SET_SE;

/*-----------------------------------------------------------------------------
	0x05c4 aud_bt_level ''
------------------------------------------------------------------------------*/
typedef struct {
	UINT32
	bass_level                      : 8,	//  0: 7
	treble_level                    : 8,	//  8:15
	                                :12,	// 16:27 reserved
	check_bit                       : 4;	// 28:31
} AUD_BT_LEVEL;

/*-----------------------------------------------------------------------------
	0x05c8 aud_levelmo_l ''
------------------------------------------------------------------------------*/
/*	no field */

/*-----------------------------------------------------------------------------
	0x05cc aud_levelmo_r ''
------------------------------------------------------------------------------*/
/*	no field */

/*-----------------------------------------------------------------------------
	0x05d0 aud_set_dly0 ''
------------------------------------------------------------------------------*/
typedef struct {
	UINT32
	i2s_delay                       :12,	//  0:11
	check_bit                       : 4,	// 12:15
	spdif_delay                     :12;	// 16:27
} AUD_SET_DLY0;

/*-----------------------------------------------------------------------------
	0x05d4 aud_set_dly1 ''
------------------------------------------------------------------------------*/
typedef struct {
	UINT32
	dac_delay                       :12,	//  0:11
	check_bit                       : 4;	// 12:15
} AUD_SET_DLY1;

/*-----------------------------------------------------------------------------
	0x05d8 aud_mpb0_wptr ''
------------------------------------------------------------------------------*/
/*	no field */

/*-----------------------------------------------------------------------------
	0x05dc aud_mpb0_rptr ''
------------------------------------------------------------------------------*/
/*	no field */

/*-----------------------------------------------------------------------------
	0x05e0 aud_mpb0_config0 ''
------------------------------------------------------------------------------*/
typedef struct {
	UINT32
	play_mode                       : 4,	//  0: 3
	                                :12,	//  4:15 reserved
	buffer_state                    : 4,	// 16:19
	repeat_number                   : 8,	// 20:27
	check_bit                       : 4;	// 28:31
} AUD_MPB0_CONFIG0;

/*-----------------------------------------------------------------------------
	0x05e4 aud_mpb0_config1 ''
------------------------------------------------------------------------------*/
typedef struct {
	UINT32
	ch_num                          : 8,	//  0: 7
	bit_num                         : 8,	//  8:15
	sfreq                           :12,	// 16:27
	check_bit                       : 4;	// 28:31
} AUD_MPB0_CONFIG1;

/*-----------------------------------------------------------------------------
	0x05e8 aud_ms10_param ''
------------------------------------------------------------------------------*/
typedef struct {
	UINT32
	drc_mode                        : 2,	//  0: 1
	downmix_mode                    : 2,	//  2: 3
	drc_cut_scl_factor              : 7,	//  4:10
	single_dec_mode                 : 1,	//    11
	drc_boost_scl_factor            : 7,	// 12:18
	main_only_mode                  : 1,	//    19
	dual_mono_mode                  : 2,	// 20:21
	kara_mode                       : 2,	// 22:23
	audio_coding_mode               : 3,	// 24:26
	write_mixing_meta               : 1,	//    27
	associdselect                   : 2,	// 28:29
	                                : 1,	//    30 reserved
	main_asso_select                : 1;	//    31
} AUD_MS10_PARAM;

/*-----------------------------------------------------------------------------
	0x05ec aud_int_state1 ''
------------------------------------------------------------------------------*/
/*	no field */

/*-----------------------------------------------------------------------------
	0x05f0 aud_int_state0 ''
------------------------------------------------------------------------------*/
/*	no field */

/*-----------------------------------------------------------------------------
	0x05f4 aud_intmask ''
------------------------------------------------------------------------------*/
typedef struct {
	UINT32
	int_err_mask0                   : 1,	//     0
	int_info_mask0                  : 1,	//     1
	int_lip_mask0                   : 1,	//     2
	int_frm_mask0                   : 1,	//     3
	int_dec_event0                  : 1,	//     4
	                                :11,	//  5:15 reserved
	int_err_mask1                   : 1,	//    16
	int_info_mask1                  : 1,	//    17
	int_lip_mask1                   : 1,	//    18
	int_frm_mask1                   : 1,	//    19
	int_dec_event1                  : 1;	//    20
} AUD_INTMASK;

/*-----------------------------------------------------------------------------
	0x05f8 aud_dsp0_state ''
------------------------------------------------------------------------------*/
typedef struct {
	UINT32
	codec_ver                       :16,	//  0:15
	codec_type                      : 8,	// 16:23
	                                : 7,	// 24:30 reserved
	stop_flag                       : 1;	//    31
} AUD_DSP0_STATE;

/*-----------------------------------------------------------------------------
	0x05fc aud_dsp1_state ''
------------------------------------------------------------------------------*/
typedef struct {
	UINT32
	codec_ver                       :16,	//  0:15
	src_enable                      : 1,	//    16
	delay_enable                    : 1,	//    17
	                                : 2,	// 18:19 reserved
	run_location                    : 8,	// 20:27
	check_bit                       : 4;	// 28:31
} AUD_DSP1_STATE;

typedef struct {
	UINT32                          	aud_reserved00                  ;	// 0x0000 : ''
	UINT32                          	aud_pesmsaddr0                  ;	// 0x0004 : ''
	UINT32                          	                 __rsvd_00[   1];	// 0x0008
	UINT32                          	aud_pesmsize0                   ;	// 0x000c : ''
	UINT32                          	                 __rsvd_01[   1];	// 0x0010
	UINT32                          	aud_esmsaddr0                   ;	// 0x0014 : ''
	UINT32                          	                 __rsvd_02[   1];	// 0x0018
	UINT32                          	aud_esmsize0                    ;	// 0x001c : ''
	UINT32                          	                 __rsvd_03[   1];	// 0x0020
	UINT32                          	aud_pesasaddr0                  ;	// 0x0024 : ''
	UINT32                          	                 __rsvd_04[   1];	// 0x0028
	UINT32                          	aud_pesasize0                   ;	// 0x002c : ''
	UINT32                          	                 __rsvd_05[   1];	// 0x0030
	UINT32                          	aud_esasaddr0                   ;	// 0x0034 : ''
	UINT32                          	                 __rsvd_06[   1];	// 0x0038
	UINT32                          	aud_esasize0                    ;	// 0x003c : ''
	UINT32                          	                 __rsvd_07[   1];	// 0x0040
	UINT32                          	aud_esidxtbl                    ;	// 0x0044 : ''
	UINT32                          	                 __rsvd_08[   1];	// 0x0048
	UINT32                          	aud_esidxsize                   ;	// 0x004c : ''
	UINT32                          	                 __rsvd_09[ 107];	// 0x0050 ~ 0x01f8
	UINT32                          	aud_hpi_a_flag                  ;	// 0x01fc : ''
	UINT32                          	                 __rsvd_10[   1];	// 0x0200
	UINT32                          	aud_se_paramaddr                ;	// 0x0204 : ''
	UINT32                          	                 __rsvd_11[   1];	// 0x0208
	UINT32                          	aud_se_param_size               ;	// 0x020c : ''
	UINT32                          	                 __rsvd_12[   1];	// 0x0210
	UINT32                          	aud_dpbm_saddr                  ;	// 0x0214 : ''
	UINT32                          	                 __rsvd_13[   1];	// 0x0218
	UINT32                          	aud_dpbm_size                   ;	// 0x021c : ''
	UINT32                          	                 __rsvd_14[   1];	// 0x0220
	UINT32                          	aud_dpba_saddr                  ;	// 0x0224 : ''
	UINT32                          	                 __rsvd_15[   1];	// 0x0228
	UINT32                          	aud_dpba_size                   ;	// 0x022c : ''
	UINT32                          	                 __rsvd_16[   1];	// 0x0230
	UINT32                          	aud_mpb0_saddr                  ;	// 0x0234 : ''
	UINT32                          	                 __rsvd_17[   1];	// 0x0238
	UINT32                          	aud_mpb0_size                   ;	// 0x023c : ''
	UINT32                          	                 __rsvd_18[   1];	// 0x0240
	UINT32                          	aud_mpb1_saddr                  ;	// 0x0244 : ''
	UINT32                          	                 __rsvd_19[   1];	// 0x0248
	UINT32                          	aud_mpb1_size                   ;	// 0x024c : ''
	UINT32                          	                 __rsvd_20[   1];	// 0x0250
	UINT32                          	aud_mpb2_saddr                  ;	// 0x0254 : ''
	UINT32                          	                 __rsvd_21[   1];	// 0x0258
	UINT32                          	aud_mpb2_size                   ;	// 0x025c : ''
	UINT32                          	                 __rsvd_22[   1];	// 0x0260
	UINT32                          	aud_mpb3_saddr                  ;	// 0x0264 : ''
	UINT32                          	                 __rsvd_23[   1];	// 0x0268
	UINT32                          	aud_mpb3_size                   ;	// 0x026c : ''
	UINT32                          	                 __rsvd_24[   1];	// 0x0270
	UINT32                          	aud_dsp1inter_saddr             ;	// 0x0274 : ''
	UINT32                          	                 __rsvd_25[   1];	// 0x0278
	UINT32                          	aud_dsp1inter_size              ;	// 0x027c : ''
	UINT32                          	                 __rsvd_26[   9];	// 0x0280 ~ 0x02a0
	UINT32                          	aud_dsp1pc0                     ;	// 0x02a4 : ''
	UINT32                          	                 __rsvd_27[   1];	// 0x02a8
	UINT32                          	aud_dsp1pc1                     ;	// 0x02ac : ''
	UINT32                          	                 __rsvd_28[   1];	// 0x02b0
	UINT32                          	aud_dsp1pc2                     ;	// 0x02b4 : ''
	UINT32                          	                 __rsvd_29[   1];	// 0x02b8
	UINT32                          	aud_dsp1pc3                     ;	// 0x02bc : ''
	UINT32                          	                 __rsvd_30[  80];	// 0x02c0 ~ 0x03fc
	UINT32                          	aud_int0_id                     ;	// 0x0400 : ''
	UINT32                          	aud_int0_clr                    ;	// 0x0404 : ''
	UINT32                          	aud_int0_en                     ;	// 0x0408 : ''
	UINT32                          	aud_int1_id                     ;	// 0x040c : ''
	UINT32                          	aud_int1_clr                    ;	// 0x0410 : ''
	UINT32                          	aud_int1_en                     ;	// 0x0414 : ''
	AUD_RUNSTALL0                   	aud_runstall0                   ;	// 0x0418 : ''
	AUD_RUNSTALL1                   	aud_runstall1                   ;	// 0x041c : ''
	AUD_STATVECSEL0                 	aud_statvecsel0                 ;	// 0x0420 : ''
	AUD_STATVECSEL1                 	aud_statvecsel1                 ;	// 0x0424 : ''
	AUD_PWAITMODE0                  	aud_pwaitmode0                  ;	// 0x0428 : ''
	AUD_PWAITMODE1                  	aud_pwaitmode1                  ;	// 0x042c : ''
	UINT32                          	aud_dsp0prid                    ;	// 0x0430 : ''
	UINT32                          	aud_dsp1prid                    ;	// 0x0434 : ''
	AUD_SWRESET                     	aud_swreset                     ;	// 0x0438 : ''
	UINT32                          	aud_mon_sel                     ;	// 0x043c : ''
	UINT32                          	aud_reserved                    ;	// 0x0440 : ''
	AUD_DIRQ0                       	aud_dirq0                       ;	// 0x0444 : ''
	AUD_DIRQ1                       	aud_dirq1                       ;	// 0x0448 : ''
	AUD_DEBUGEN0                    	aud_debugen0                    ;	// 0x044c : ''
	AUD_DEBUGEN1                    	aud_debugen1                    ;	// 0x0450 : ''
	AUD_NMIINT0                     	aud_nmiint0                     ;	// 0x0454 : ''
	AUD_MMIINT1                     	aud_mmiint1                     ;	// 0x0458 : ''
	AUD_XOCDMODE0                   	aud_xocdmode0                   ;	// 0x045c : ''
	AUD_XOCDMODE1                   	aud_xocdmode1                   ;	// 0x0460 : ''
	UINT32                          	aud_debugdata0                  ;	// 0x0464 : ''
	UINT32                          	aud_debugdata1                  ;	// 0x0468 : ''
	UINT32                          	aud_debugpc0                    ;	// 0x046c : ''
	UINT32                          	aud_debugpc1                    ;	// 0x0470 : ''
	UINT32                          	aud_debugstat0                  ;	// 0x0474 : ''
	UINT32                          	aud_debugstat1                  ;	// 0x0478 : ''
	AUD_GSTCCHREG                   	aud_gstcchreg                   ;	// 0x047c : ''
	UINT32                          	aud_gstcclreg                   ;	// 0x0480 : ''
	UINT32                          	                 __rsvd_31[  31];	// 0x0484 ~ 0x04fc
	AUD_PLAY_MODE                   	aud_play_mode                   ;	// 0x0500 : ''
	AUD_SET_VOLUME                  	aud_set_volume                  ;	// 0x0504 : ''
	AUD_SET_DS_VOL                  	aud_set_ds_vol                  ;	// 0x0508 : ''
	AUD_SET_INOUT                   	aud_set_inout                   ;	// 0x050c : ''
	UINT32                          	aud_pesm_wptr0                  ;	// 0x0510 : ''
	UINT32                          	aud_pesm_rptr0                  ;	// 0x0514 : ''
	UINT32                          	aud_pesa_wptr0                  ;	// 0x0518 : ''
	UINT32                          	aud_pesa_rptr0                  ;	// 0x051c : ''
	UINT32                          	aud_dpbm_wptr                   ;	// 0x0520 : ''
	UINT32                          	aud_dpbm_rptr                   ;	// 0x0524 : ''
	UINT32                          	aud_dpba_wptr                   ;	// 0x0528 : ''
	UINT32                          	aud_dpba_rptr                   ;	// 0x052c : ''
	UINT32                          	aud_ppb_wptr                    ;	// 0x0530 : ''
	UINT32                          	aud_ppb_rptr                    ;	// 0x0534 : ''
	AUD_LIP_CFG                     	aud_lip_cfg                     ;	// 0x0538 : ''
	AUD_MLIP_BOUND0                 	aud_mlip_bound0                 ;	// 0x053c : ''
	AUD_ALIP_BOUND0                 	aud_alip_bound0                 ;	// 0x0540 : ''
	AUD_FRM_CNT0                    	aud_frm_cnt0                    ;	// 0x0544 : ''
	UINT32                          	cmd12                           ;	// 0x0548 : ''
	AUD_DECSTAT0                    	aud_decstat0                    ;	// 0x054c : ''
	UINT32                          	aud_decstat1                    ;	// 0x0550 : ''
	UINT32                          	aud_decstat2                    ;	// 0x0554 : ''
	UINT32                          	aud_decstat3                    ;	// 0x0558 : ''
	AUD_DECCFG0                     	aud_deccfg0                     ;	// 0x055c : ''
	AUD_DECCFG1                     	aud_deccfg1                     ;	// 0x0560 : ''
	AUD_DECCFG2                     	aud_deccfg2                     ;	// 0x0564 : ''
	AUD_DECCFG3                     	aud_deccfg3                     ;	// 0x0568 : ''
	UINT32                          	aud_stc24                       ;	// 0x056c : ''
	UINT32                          	aud_ptsm24                      ;	// 0x0570 : ''
	UINT32                          	aud_ptsa24                      ;	// 0x0574 : ''
	AUD_SET_W_VOL                   	aud_set_w_vol                   ;	// 0x0578 : ''
	AUD_SET_SH_VOL                  	aud_set_sh_vol                  ;	// 0x057c : ''
	UINT32                          	aud_dsp0offset0                 ;	// 0x0580 : ''
	UINT32                          	aud_dsp0offset1                 ;	// 0x0584 : ''
	UINT32                          	aud_dsp0offset2                 ;	// 0x0588 : ''
	UINT32                          	aud_dsp0offset3                 ;	// 0x058c : ''
	UINT32                          	aud_dsp0offset4                 ;	// 0x0590 : ''
	UINT32                          	aud_dsp0offset5                 ;	// 0x0594 : ''
	UINT32                          	aud_dsp0offset6                 ;	// 0x0598 : ''
	UINT32                          	aud_dsp0offset7                 ;	// 0x059c : ''
	UINT32                          	aud_dsp1offset0                 ;	// 0x05a0 : ''
	UINT32                          	aud_dsp1offset1                 ;	// 0x05a4 : ''
	UINT32                          	aud_dsp1offset2                 ;	// 0x05a8 : ''
	UINT32                          	aud_dsp1offset3                 ;	// 0x05ac : ''
	UINT32                          	aud_dsp1offset4                 ;	// 0x05b0 : ''
	UINT32                          	aud_dsp1offset5                 ;	// 0x05b4 : ''
	UINT32                          	aud_dsp1offset6                 ;	// 0x05b8 : ''
	UINT32                          	aud_dsp1offset7                 ;	// 0x05bc : ''
	AUD_SET_SE                      	aud_set_se                      ;	// 0x05c0 : ''
	AUD_BT_LEVEL                    	aud_bt_level                    ;	// 0x05c4 : ''
	UINT32                          	aud_levelmo_l                   ;	// 0x05c8 : ''
	UINT32                          	aud_levelmo_r                   ;	// 0x05cc : ''
	AUD_SET_DLY0                    	aud_set_dly0                    ;	// 0x05d0 : ''
	AUD_SET_DLY1                    	aud_set_dly1                    ;	// 0x05d4 : ''
	UINT32                          	aud_mpb0_wptr                   ;	// 0x05d8 : ''
	UINT32                          	aud_mpb0_rptr                   ;	// 0x05dc : ''
	AUD_MPB0_CONFIG0                	aud_mpb0_config0                ;	// 0x05e0 : ''
	AUD_MPB0_CONFIG1                	aud_mpb0_config1                ;	// 0x05e4 : ''
	AUD_MS10_PARAM                  	aud_ms10_param                  ;	// 0x05e8 : ''
	UINT32                          	aud_int_state1                  ;	// 0x05ec : ''
	UINT32                          	aud_int_state0                  ;	// 0x05f0 : ''
	AUD_INTMASK                     	aud_intmask                     ;	// 0x05f4 : ''
	AUD_DSP0_STATE                  	aud_dsp0_state                  ;	// 0x05f8 : ''
	AUD_DSP1_STATE                  	aud_dsp1_state                  ;	// 0x05fc : ''
} AUD_REG_L8_T;
/* 129 regs, 129 types */

/* 129 regs, 129 types in Total*/

/*
 * @{
 * Naming for register pointer.
 * gpRealRegAUD_l8 : real register of AUD.
 * gpRegAUD_l8     : shadow register.
 *
 * @def AUD_RdFL: Read  FLushing : Shadow <- Real.
 * @def AUD_WrFL: Write FLushing : Shadow -> Real.
 * @def AUD_Rd  : Read  whole register(UINT32) from Shadow register.
 * @def AUD_Wr  : Write whole register(UINT32) from Shadow register.
 * @def AUD_Rd01 ~ AUD_Rdnn: Read  given '01~nn' fields from Shadow register.
 * @def AUD_Wr01 ~ AUD_Wrnn: Write given '01~nn' fields to   Shadow register.
 * */
#define AUD_L8_RdFL(_r)			((gpRegAUD_l8->_r)=(gpRealRegAUD_l8->_r))
#define AUD_L8_WrFL(_r)			((gpRealRegAUD_l8->_r)=(gpRegAUD_l8->_r))

#define AUD_L8_Rd(_r)			*((UINT32*)(&(gpRegAUD_l8->_r)))
#define AUD_L8_Wr(_r,_v)		((AUD_L8_Rd(_r))=((UINT32)(_v)))

#define AUD_L8_Rd01(_r,_f01,_v01)													\
								do { 											\
									(_v01) = (gpRegAUD_l8->_r._f01);				\
								} while(0)

#define AUD_L8_Rd02(_r,_f01,_v01,_f02,_v02)										\
								do { 											\
									(_v01) = (gpRegAUD_l8->_r._f01);				\
									(_v02) = (gpRegAUD_l8->_r._f02);				\
								} while(0)

#define AUD_L8_Rd03(_r,_f01,_v01,_f02,_v02,_f03,_v03)								\
								do { 											\
									(_v01) = (gpRegAUD_l8->_r._f01);				\
									(_v02) = (gpRegAUD_l8->_r._f02);				\
									(_v03) = (gpRegAUD_l8->_r._f03);				\
								} while(0)

#define AUD_L8_Rd04(_r,_f01,_v01,_f02,_v02,_f03,_v03,_f04,_v04)					\
								do { 											\
									(_v01) = (gpRegAUD_l8->_r._f01);				\
									(_v02) = (gpRegAUD_l8->_r._f02);				\
									(_v03) = (gpRegAUD_l8->_r._f03);				\
									(_v04) = (gpRegAUD_l8->_r._f04);				\
								} while(0)

#define AUD_L8_Rd05(_r,_f01,_v01,_f02,_v02,_f03,_v03,_f04,_v04,					\
					_f05,_v05)													\
								do { 											\
									(_v01) = (gpRegAUD_l8->_r._f01);				\
									(_v02) = (gpRegAUD_l8->_r._f02);				\
									(_v03) = (gpRegAUD_l8->_r._f03);				\
									(_v04) = (gpRegAUD_l8->_r._f04);				\
									(_v05) = (gpRegAUD_l8->_r._f05);				\
								} while(0)

#define AUD_L8_Rd06(_r,_f01,_v01,_f02,_v02,_f03,_v03,_f04,_v04,					\
					_f05,_v05,_f06,_v06)										\
								do { 											\
									(_v01) = (gpRegAUD_l8->_r._f01);				\
									(_v02) = (gpRegAUD_l8->_r._f02);				\
									(_v03) = (gpRegAUD_l8->_r._f03);				\
									(_v04) = (gpRegAUD_l8->_r._f04);				\
									(_v05) = (gpRegAUD_l8->_r._f05);				\
									(_v06) = (gpRegAUD_l8->_r._f06);				\
								} while(0)

#define AUD_L8_Rd07(_r,_f01,_v01,_f02,_v02,_f03,_v03,_f04,_v04,					\
					_f05,_v05,_f06,_v06,_f07,_v07)								\
								do { 											\
									(_v01) = (gpRegAUD_l8->_r._f01);				\
									(_v02) = (gpRegAUD_l8->_r._f02);				\
									(_v03) = (gpRegAUD_l8->_r._f03);				\
									(_v04) = (gpRegAUD_l8->_r._f04);				\
									(_v05) = (gpRegAUD_l8->_r._f05);				\
									(_v06) = (gpRegAUD_l8->_r._f06);				\
									(_v07) = (gpRegAUD_l8->_r._f07);				\
								} while(0)

#define AUD_L8_Rd08(_r,_f01,_v01,_f02,_v02,_f03,_v03,_f04,_v04,					\
					_f05,_v05,_f06,_v06,_f07,_v07,_f08,_v08)					\
								do { 											\
									(_v01) = (gpRegAUD_l8->_r._f01);				\
									(_v02) = (gpRegAUD_l8->_r._f02);				\
									(_v03) = (gpRegAUD_l8->_r._f03);				\
									(_v04) = (gpRegAUD_l8->_r._f04);				\
									(_v05) = (gpRegAUD_l8->_r._f05);				\
									(_v06) = (gpRegAUD_l8->_r._f06);				\
									(_v07) = (gpRegAUD_l8->_r._f07);				\
									(_v08) = (gpRegAUD_l8->_r._f08);				\
								} while(0)

#define AUD_L8_Rd09(_r,_f01,_v01,_f02,_v02,_f03,_v03,_f04,_v04,					\
					_f05,_v05,_f06,_v06,_f07,_v07,_f08,_v08,					\
					_f09,_v09)													\
								do { 											\
									(_v01) = (gpRegAUD_l8->_r._f01);				\
									(_v02) = (gpRegAUD_l8->_r._f02);				\
									(_v03) = (gpRegAUD_l8->_r._f03);				\
									(_v04) = (gpRegAUD_l8->_r._f04);				\
									(_v05) = (gpRegAUD_l8->_r._f05);				\
									(_v06) = (gpRegAUD_l8->_r._f06);				\
									(_v07) = (gpRegAUD_l8->_r._f07);				\
									(_v08) = (gpRegAUD_l8->_r._f08);				\
									(_v09) = (gpRegAUD_l8->_r._f09);				\
								} while(0)

#define AUD_L8_Rd10(_r,_f01,_v01,_f02,_v02,_f03,_v03,_f04,_v04,					\
					_f05,_v05,_f06,_v06,_f07,_v07,_f08,_v08,					\
					_f09,_v09,_f10,_v10)										\
								do { 											\
									(_v01) = (gpRegAUD_l8->_r._f01);				\
									(_v02) = (gpRegAUD_l8->_r._f02);				\
									(_v03) = (gpRegAUD_l8->_r._f03);				\
									(_v04) = (gpRegAUD_l8->_r._f04);				\
									(_v05) = (gpRegAUD_l8->_r._f05);				\
									(_v06) = (gpRegAUD_l8->_r._f06);				\
									(_v07) = (gpRegAUD_l8->_r._f07);				\
									(_v08) = (gpRegAUD_l8->_r._f08);				\
									(_v09) = (gpRegAUD_l8->_r._f09);				\
									(_v10) = (gpRegAUD_l8->_r._f10);				\
								} while(0)

#define AUD_L8_Rd11(_r,_f01,_v01,_f02,_v02,_f03,_v03,_f04,_v04,					\
					_f05,_v05,_f06,_v06,_f07,_v07,_f08,_v08,					\
					_f09,_v09,_f10,_v10,_f11,_v11)								\
								do { 											\
									(_v01) = (gpRegAUD_l8->_r._f01);				\
									(_v02) = (gpRegAUD_l8->_r._f02);				\
									(_v03) = (gpRegAUD_l8->_r._f03);				\
									(_v04) = (gpRegAUD_l8->_r._f04);				\
									(_v05) = (gpRegAUD_l8->_r._f05);				\
									(_v06) = (gpRegAUD_l8->_r._f06);				\
									(_v07) = (gpRegAUD_l8->_r._f07);				\
									(_v08) = (gpRegAUD_l8->_r._f08);				\
									(_v09) = (gpRegAUD_l8->_r._f09);				\
									(_v10) = (gpRegAUD_l8->_r._f10);				\
									(_v11) = (gpRegAUD_l8->_r._f11);				\
								} while(0)

#define AUD_L8_Rd12(_r,_f01,_v01,_f02,_v02,_f03,_v03,_f04,_v04,					\
					_f05,_v05,_f06,_v06,_f07,_v07,_f08,_v08,					\
					_f09,_v09,_f10,_v10,_f11,_v11,_f12,_v12)					\
								do { 											\
									(_v01) = (gpRegAUD_l8->_r._f01);				\
									(_v02) = (gpRegAUD_l8->_r._f02);				\
									(_v03) = (gpRegAUD_l8->_r._f03);				\
									(_v04) = (gpRegAUD_l8->_r._f04);				\
									(_v05) = (gpRegAUD_l8->_r._f05);				\
									(_v06) = (gpRegAUD_l8->_r._f06);				\
									(_v07) = (gpRegAUD_l8->_r._f07);				\
									(_v08) = (gpRegAUD_l8->_r._f08);				\
									(_v09) = (gpRegAUD_l8->_r._f09);				\
									(_v10) = (gpRegAUD_l8->_r._f10);				\
									(_v11) = (gpRegAUD_l8->_r._f11);				\
									(_v12) = (gpRegAUD_l8->_r._f12);				\
								} while(0)

#define AUD_L8_Rd13(_r,_f01,_v01,_f02,_v02,_f03,_v03,_f04,_v04,					\
					_f05,_v05,_f06,_v06,_f07,_v07,_f08,_v08,					\
					_f09,_v09,_f10,_v10,_f11,_v11,_f12,_v12,					\
					_f13,_v13)													\
								do { 											\
									(_v01) = (gpRegAUD_l8->_r._f01);				\
									(_v02) = (gpRegAUD_l8->_r._f02);				\
									(_v03) = (gpRegAUD_l8->_r._f03);				\
									(_v04) = (gpRegAUD_l8->_r._f04);				\
									(_v05) = (gpRegAUD_l8->_r._f05);				\
									(_v06) = (gpRegAUD_l8->_r._f06);				\
									(_v07) = (gpRegAUD_l8->_r._f07);				\
									(_v08) = (gpRegAUD_l8->_r._f08);				\
									(_v09) = (gpRegAUD_l8->_r._f09);				\
									(_v10) = (gpRegAUD_l8->_r._f10);				\
									(_v11) = (gpRegAUD_l8->_r._f11);				\
									(_v12) = (gpRegAUD_l8->_r._f12);				\
									(_v13) = (gpRegAUD_l8->_r._f13);				\
								} while(0)

#define AUD_L8_Rd14(_r,_f01,_v01,_f02,_v02,_f03,_v03,_f04,_v04,					\
					_f05,_v05,_f06,_v06,_f07,_v07,_f08,_v08,					\
					_f09,_v09,_f10,_v10,_f11,_v11,_f12,_v12,					\
					_f13,_v13,_f14,_v14)										\
								do { 											\
									(_v01) = (gpRegAUD_l8->_r._f01);				\
									(_v02) = (gpRegAUD_l8->_r._f02);				\
									(_v03) = (gpRegAUD_l8->_r._f03);				\
									(_v04) = (gpRegAUD_l8->_r._f04);				\
									(_v05) = (gpRegAUD_l8->_r._f05);				\
									(_v06) = (gpRegAUD_l8->_r._f06);				\
									(_v07) = (gpRegAUD_l8->_r._f07);				\
									(_v08) = (gpRegAUD_l8->_r._f08);				\
									(_v09) = (gpRegAUD_l8->_r._f09);				\
									(_v10) = (gpRegAUD_l8->_r._f10);				\
									(_v11) = (gpRegAUD_l8->_r._f11);				\
									(_v12) = (gpRegAUD_l8->_r._f12);				\
									(_v13) = (gpRegAUD_l8->_r._f13);				\
									(_v14) = (gpRegAUD_l8->_r._f14);				\
								} while(0)

#define AUD_L8_Rd15(_r,_f01,_v01,_f02,_v02,_f03,_v03,_f04,_v04,					\
					_f05,_v05,_f06,_v06,_f07,_v07,_f08,_v08,					\
					_f09,_v09,_f10,_v10,_f11,_v11,_f12,_v12,					\
					_f13,_v13,_f14,_v14,_f15,_v15)								\
								do { 											\
									(_v01) = (gpRegAUD_l8->_r._f01);				\
									(_v02) = (gpRegAUD_l8->_r._f02);				\
									(_v03) = (gpRegAUD_l8->_r._f03);				\
									(_v04) = (gpRegAUD_l8->_r._f04);				\
									(_v05) = (gpRegAUD_l8->_r._f05);				\
									(_v06) = (gpRegAUD_l8->_r._f06);				\
									(_v07) = (gpRegAUD_l8->_r._f07);				\
									(_v08) = (gpRegAUD_l8->_r._f08);				\
									(_v09) = (gpRegAUD_l8->_r._f09);				\
									(_v10) = (gpRegAUD_l8->_r._f10);				\
									(_v11) = (gpRegAUD_l8->_r._f11);				\
									(_v12) = (gpRegAUD_l8->_r._f12);				\
									(_v13) = (gpRegAUD_l8->_r._f13);				\
									(_v14) = (gpRegAUD_l8->_r._f14);				\
									(_v15) = (gpRegAUD_l8->_r._f15);				\
								} while(0)

#define AUD_L8_Rd16(_r,_f01,_v01,_f02,_v02,_f03,_v03,_f04,_v04,					\
					_f05,_v05,_f06,_v06,_f07,_v07,_f08,_v08,					\
					_f09,_v09,_f10,_v10,_f11,_v11,_f12,_v12,					\
					_f13,_v13,_f14,_v14,_f15,_v15,_f16,_v16)					\
								do { 											\
									(_v01) = (gpRegAUD_l8->_r._f01);				\
									(_v02) = (gpRegAUD_l8->_r._f02);				\
									(_v03) = (gpRegAUD_l8->_r._f03);				\
									(_v04) = (gpRegAUD_l8->_r._f04);				\
									(_v05) = (gpRegAUD_l8->_r._f05);				\
									(_v06) = (gpRegAUD_l8->_r._f06);				\
									(_v07) = (gpRegAUD_l8->_r._f07);				\
									(_v08) = (gpRegAUD_l8->_r._f08);				\
									(_v09) = (gpRegAUD_l8->_r._f09);				\
									(_v10) = (gpRegAUD_l8->_r._f10);				\
									(_v11) = (gpRegAUD_l8->_r._f11);				\
									(_v12) = (gpRegAUD_l8->_r._f12);				\
									(_v13) = (gpRegAUD_l8->_r._f13);				\
									(_v14) = (gpRegAUD_l8->_r._f14);				\
									(_v15) = (gpRegAUD_l8->_r._f15);				\
									(_v16) = (gpRegAUD_l8->_r._f16);				\
								} while(0)


#define AUD_L8_Wr01(_r,_f01,_v01)													\
								do { 											\
									(gpRegAUD_l8->_r._f01) = (_v01);				\
								} while(0)

#define AUD_L8_Wr02(_r,_f01,_v01,_f02,_v02)										\
								do { 											\
									(gpRegAUD_l8->_r._f01) = (_v01);				\
									(gpRegAUD_l8->_r._f02) = (_v02);				\
								} while(0)

#define AUD_L8_Wr03(_r,_f01,_v01,_f02,_v02,_f03,_v03)								\
								do { 											\
									(gpRegAUD_l8->_r._f01) = (_v01);				\
									(gpRegAUD_l8->_r._f02) = (_v02);				\
									(gpRegAUD_l8->_r._f03) = (_v03);				\
								} while(0)

#define AUD_L8_Wr04(_r,_f01,_v01,_f02,_v02,_f03,_v03,_f04,_v04)					\
								do { 											\
									(gpRegAUD_l8->_r._f01) = (_v01);				\
									(gpRegAUD_l8->_r._f02) = (_v02);				\
									(gpRegAUD_l8->_r._f03) = (_v03);				\
									(gpRegAUD_l8->_r._f04) = (_v04);				\
								} while(0)

#define AUD_L8_Wr05(_r,_f01,_v01,_f02,_v02,_f03,_v03,_f04,_v04,					\
					_f05,_v05)													\
								do { 											\
									(gpRegAUD_l8->_r._f01) = (_v01);				\
									(gpRegAUD_l8->_r._f02) = (_v02);				\
									(gpRegAUD_l8->_r._f03) = (_v03);				\
									(gpRegAUD_l8->_r._f04) = (_v04);				\
									(gpRegAUD_l8->_r._f05) = (_v05);				\
								} while(0)

#define AUD_L8_Wr06(_r,_f01,_v01,_f02,_v02,_f03,_v03,_f04,_v04,					\
					_f05,_v05,_f06,_v06)										\
								do { 											\
									(gpRegAUD_l8->_r._f01) = (_v01);				\
									(gpRegAUD_l8->_r._f02) = (_v02);				\
									(gpRegAUD_l8->_r._f03) = (_v03);				\
									(gpRegAUD_l8->_r._f04) = (_v04);				\
									(gpRegAUD_l8->_r._f05) = (_v05);				\
									(gpRegAUD_l8->_r._f06) = (_v06);				\
								} while(0)

#define AUD_L8_Wr07(_r,_f01,_v01,_f02,_v02,_f03,_v03,_f04,_v04,					\
					_f05,_v05,_f06,_v06,_f07,_v07)								\
								do { 											\
									(gpRegAUD_l8->_r._f01) = (_v01);				\
									(gpRegAUD_l8->_r._f02) = (_v02);				\
									(gpRegAUD_l8->_r._f03) = (_v03);				\
									(gpRegAUD_l8->_r._f04) = (_v04);				\
									(gpRegAUD_l8->_r._f05) = (_v05);				\
									(gpRegAUD_l8->_r._f06) = (_v06);				\
									(gpRegAUD_l8->_r._f07) = (_v07);				\
								} while(0)

#define AUD_L8_Wr08(_r,_f01,_v01,_f02,_v02,_f03,_v03,_f04,_v04,					\
					_f05,_v05,_f06,_v06,_f07,_v07,_f08,_v08)					\
								do { 											\
									(gpRegAUD_l8->_r._f01) = (_v01);				\
									(gpRegAUD_l8->_r._f02) = (_v02);				\
									(gpRegAUD_l8->_r._f03) = (_v03);				\
									(gpRegAUD_l8->_r._f04) = (_v04);				\
									(gpRegAUD_l8->_r._f05) = (_v05);				\
									(gpRegAUD_l8->_r._f06) = (_v06);				\
									(gpRegAUD_l8->_r._f07) = (_v07);				\
									(gpRegAUD_l8->_r._f08) = (_v08);				\
								} while(0)

#define AUD_Wr09(_r,_f01,_v01,_f02,_v02,_f03,_v03,_f04,_v04,					\
					_f05,_v05,_f06,_v06,_f07,_v07,_f08,_v08,					\
					_f09,_v09)													\
								do { 											\
									(gpRegAUD_l8->_r._f01) = (_v01);				\
									(gpRegAUD_l8->_r._f02) = (_v02);				\
									(gpRegAUD_l8->_r._f03) = (_v03);				\
									(gpRegAUD_l8->_r._f04) = (_v04);				\
									(gpRegAUD_l8->_r._f05) = (_v05);				\
									(gpRegAUD_l8->_r._f06) = (_v06);				\
									(gpRegAUD_l8->_r._f07) = (_v07);				\
									(gpRegAUD_l8->_r._f08) = (_v08);				\
									(gpRegAUD_l8->_r._f09) = (_v09);				\
								} while(0)

#define AUD_L8_Wr10(_r,_f01,_v01,_f02,_v02,_f03,_v03,_f04,_v04,					\
					_f05,_v05,_f06,_v06,_f07,_v07,_f08,_v08,					\
					_f09,_v09,_f10,_v10)										\
								do { 											\
									(gpRegAUD_l8->_r._f01) = (_v01);				\
									(gpRegAUD_l8->_r._f02) = (_v02);				\
									(gpRegAUD_l8->_r._f03) = (_v03);				\
									(gpRegAUD_l8->_r._f04) = (_v04);				\
									(gpRegAUD_l8->_r._f05) = (_v05);				\
									(gpRegAUD_l8->_r._f06) = (_v06);				\
									(gpRegAUD_l8->_r._f07) = (_v07);				\
									(gpRegAUD_l8->_r._f08) = (_v08);				\
									(gpRegAUD_l8->_r._f09) = (_v09);				\
									(gpRegAUD_l8->_r._f10) = (_v10);				\
								} while(0)

#define AUD_L8_Wr11(_r,_f01,_v01,_f02,_v02,_f03,_v03,_f04,_v04,					\
					_f05,_v05,_f06,_v06,_f07,_v07,_f08,_v08,					\
					_f09,_v09,_f10,_v10,_f11,_v11)								\
								do { 											\
									(gpRegAUD_l8->_r._f01) = (_v01);				\
									(gpRegAUD_l8->_r._f02) = (_v02);				\
									(gpRegAUD_l8->_r._f03) = (_v03);				\
									(gpRegAUD_l8->_r._f04) = (_v04);				\
									(gpRegAUD_l8->_r._f05) = (_v05);				\
									(gpRegAUD_l8->_r._f06) = (_v06);				\
									(gpRegAUD_l8->_r._f07) = (_v07);				\
									(gpRegAUD_l8->_r._f08) = (_v08);				\
									(gpRegAUD_l8->_r._f09) = (_v09);				\
									(gpRegAUD_l8->_r._f10) = (_v10);				\
									(gpRegAUD_l8->_r._f11) = (_v11);				\
								} while(0)

#define AUD_L8_Wr12(_r,_f01,_v01,_f02,_v02,_f03,_v03,_f04,_v04,					\
					_f05,_v05,_f06,_v06,_f07,_v07,_f08,_v08,					\
					_f09,_v09,_f10,_v10,_f11,_v11,_f12,_v12)					\
								do { 											\
									(gpRegAUD_l8->_r._f01) = (_v01);				\
									(gpRegAUD_l8->_r._f02) = (_v02);				\
									(gpRegAUD_l8->_r._f03) = (_v03);				\
									(gpRegAUD_l8->_r._f04) = (_v04);				\
									(gpRegAUD_l8->_r._f05) = (_v05);				\
									(gpRegAUD_l8->_r._f06) = (_v06);				\
									(gpRegAUD_l8->_r._f07) = (_v07);				\
									(gpRegAUD_l8->_r._f08) = (_v08);				\
									(gpRegAUD_l8->_r._f09) = (_v09);				\
									(gpRegAUD_l8->_r._f10) = (_v10);				\
									(gpRegAUD_l8->_r._f11) = (_v11);				\
									(gpRegAUD_l8->_r._f12) = (_v12);				\
								} while(0)

#define AUD_L8_Wr13(_r,_f01,_v01,_f02,_v02,_f03,_v03,_f04,_v04,					\
					_f05,_v05,_f06,_v06,_f07,_v07,_f08,_v08,					\
					_f09,_v09,_f10,_v10,_f11,_v11,_f12,_v12,					\
					_f13,_v13)													\
								do { 											\
									(gpRegAUD_l8->_r._f01) = (_v01);				\
									(gpRegAUD_l8->_r._f02) = (_v02);				\
									(gpRegAUD_l8->_r._f03) = (_v03);				\
									(gpRegAUD_l8->_r._f04) = (_v04);				\
									(gpRegAUD_l8->_r._f05) = (_v05);				\
									(gpRegAUD_l8->_r._f06) = (_v06);				\
									(gpRegAUD_l8->_r._f07) = (_v07);				\
									(gpRegAUD_l8->_r._f08) = (_v08);				\
									(gpRegAUD_l8->_r._f09) = (_v09);				\
									(gpRegAUD_l8->_r._f10) = (_v10);				\
									(gpRegAUD_l8->_r._f11) = (_v11);				\
									(gpRegAUD_l8->_r._f12) = (_v12);				\
									(gpRegAUD_l8->_r._f13) = (_v13);				\
								} while(0)

#define AUD_L8_Wr14(_r,_f01,_v01,_f02,_v02,_f03,_v03,_f04,_v04,					\
					_f05,_v05,_f06,_v06,_f07,_v07,_f08,_v08,					\
					_f09,_v09,_f10,_v10,_f11,_v11,_f12,_v12,					\
					_f13,_v13,_f14,_v14)										\
								do { 											\
									(gpRegAUD_l8->_r._f01) = (_v01);				\
									(gpRegAUD_l8->_r._f02) = (_v02);				\
									(gpRegAUD_l8->_r._f03) = (_v03);				\
									(gpRegAUD_l8->_r._f04) = (_v04);				\
									(gpRegAUD_l8->_r._f05) = (_v05);				\
									(gpRegAUD_l8->_r._f06) = (_v06);				\
									(gpRegAUD_l8->_r._f07) = (_v07);				\
									(gpRegAUD_l8->_r._f08) = (_v08);				\
									(gpRegAUD_l8->_r._f09) = (_v09);				\
									(gpRegAUD_l8->_r._f10) = (_v10);				\
									(gpRegAUD_l8->_r._f11) = (_v11);				\
									(gpRegAUD_l8->_r._f12) = (_v12);				\
									(gpRegAUD_l8->_r._f13) = (_v13);				\
									(gpRegAUD_l8->_r._f14) = (_v14);				\
								} while(0)

#define AUD_L8_Wr15(_r,_f01,_v01,_f02,_v02,_f03,_v03,_f04,_v04,					\
					_f05,_v05,_f06,_v06,_f07,_v07,_f08,_v08,					\
					_f09,_v09,_f10,_v10,_f11,_v11,_f12,_v12,					\
					_f13,_v13,_f14,_v14,_f15,_v15)								\
								do { 											\
									(gpRegAUD_l8->_r._f01) = (_v01);				\
									(gpRegAUD_l8->_r._f02) = (_v02);				\
									(gpRegAUD_l8->_r._f03) = (_v03);				\
									(gpRegAUD_l8->_r._f04) = (_v04);				\
									(gpRegAUD_l8->_r._f05) = (_v05);				\
									(gpRegAUD_l8->_r._f06) = (_v06);				\
									(gpRegAUD_l8->_r._f07) = (_v07);				\
									(gpRegAUD_l8->_r._f08) = (_v08);				\
									(gpRegAUD_l8->_r._f09) = (_v09);				\
									(gpRegAUD_l8->_r._f10) = (_v10);				\
									(gpRegAUD_l8->_r._f11) = (_v11);				\
									(gpRegAUD_l8->_r._f12) = (_v12);				\
									(gpRegAUD_l8->_r._f13) = (_v13);				\
									(gpRegAUD_l8->_r._f14) = (_v14);				\
									(gpRegAUD_l8->_r._f15) = (_v15);				\
								} while(0)

#define AUD_L8_Wr16(_r,_f01,_v01,_f02,_v02,_f03,_v03,_f04,_v04,					\
					_f05,_v05,_f06,_v06,_f07,_v07,_f08,_v08,					\
					_f09,_v09,_f10,_v10,_f11,_v11,_f12,_v12,					\
					_f13,_v13,_f14,_v14,_f15,_v15,_f16,_v16)					\
								do { 											\
									(gpRegAUD_l8->_r._f01) = (_v01);				\
									(gpRegAUD_l8->_r._f02) = (_v02);				\
									(gpRegAUD_l8->_r._f03) = (_v03);				\
									(gpRegAUD_l8->_r._f04) = (_v04);				\
									(gpRegAUD_l8->_r._f05) = (_v05);				\
									(gpRegAUD_l8->_r._f06) = (_v06);				\
									(gpRegAUD_l8->_r._f07) = (_v07);				\
									(gpRegAUD_l8->_r._f08) = (_v08);				\
									(gpRegAUD_l8->_r._f09) = (_v09);				\
									(gpRegAUD_l8->_r._f10) = (_v10);				\
									(gpRegAUD_l8->_r._f11) = (_v11);				\
									(gpRegAUD_l8->_r._f12) = (_v12);				\
									(gpRegAUD_l8->_r._f13) = (_v13);				\
									(gpRegAUD_l8->_r._f14) = (_v14);				\
									(gpRegAUD_l8->_r._f15) = (_v15);				\
									(gpRegAUD_l8->_r._f16) = (_v16);				\
								} while(0)

/* Indexed Register Access.
 *
 * There is in-direct field specified by 'index' field within a register.
 * Normally a register has only one meaning for a 'field_name', but indexed register
 * can hold several data for a 'field_name' specifed by 'index' field of indexed register.
 * When writing an 3rd data for given 'field_name' register, you need to set 'rw' = 0, 'index' = 2,
 * and 'load' = 0.
 *
 * ASSUMPTION
 * For Writing indexed register load bit
 *
 * parameter list
 * _r     : name of register
 * _lname : name of load  bit field	: shall be 0 after macro executed.
 * _rwname: name of rw    bit field : shall be 0 after AUD_Wind(), 1 for AUD_Rind()
 * _iname : name of index bit field
 * _ival  : index value
 * _fname : field name
 * _fval  : field variable that field value shall be stored.
 *
 * AUD_Rind : General indexed register Read.(
 * AUD_Wind : General indexed register Read.
 *
 * AUD_Ridx : For 'index', 'rw', 'load' field name
 * AUD_Widx : For 'index', 'rw', 'load' field name and NO_LOAD.
 */
#define AUD_Rind(_r, _lname, _rwname, _iname, _ival, _fname, _fval)				\
							do {												\
								AUD_Wr03(_r,_lname,0,_rwname,1,_iname,_ival);	\
								AUD_WrFL(_r);									\
								AUD_RdFL(_r);									\
								AUD_Rd01(_r,_fname,_fval);						\
							} while (0)

#define AUD_Wind(_r, _lname, _rwname, _iname, _ival, _fname, _fval)				\
				AUD_Wr04(_r, _lname,0, _rwname,0, _iname,_ival, _fname,_fval)


#define AUD_Ridx(_r, _ival, _fname, _fval)	AUD_Rind(_r,load,rw,index,_ival,_fname,_fval)

#define AUD_Widx(_r, _ival, _fname, _fval)	AUD_Wind(_r,load,rw,index,_ival,_fname,_fval)

/** @} *//* end of macro documentation */

#ifdef __cplusplus
}
#endif

#endif	/* _ADEC_REG_L8_H_ */

/* from 'LG1150-AUD-MAN-v1.08.csv' 20110427 08:32:43   KOR by getregs v2.7 */
